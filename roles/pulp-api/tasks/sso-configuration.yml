---
- name: Deploy SSO Realm & Client
  k8s:
    kind: KeycloakRealm
    definition: "{{ lookup('template', 'sso-realm-client.yaml.j2') }}"

- name: Check for specified sso storage configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ sso_secret }}'
  register: _sso_configuration
  no_log: true

- name: Check sso secret data format
  set_fact:
    sso_secret_data_available: true
  when:
    - _sso_configuration is defined
    - _sso_configuration.resources is defined
    - _sso_configuration.resources[0] is defined
    - _sso_configuration.resources[0].data is defined

- name: Fail if sso secret object is an unexpected format
  fail:
    msg: "Cannot read the data for secret {{ _sso_configuration  }}"
  when:
    - not sso_secret_data_available

- name: Check if social_auth_keycloak_key is found
  set_fact:
    social_auth_keycloak_key_available: true
  when:
    - sso_secret_data_available
    - _sso_configuration.resources[0].data['social_auth_keycloak_key'] is defined
    - _sso_configuration.resources[0].data['social_auth_keycloak_key'] | length

- name: Add s3 access key id to s3 settings
  set_fact:
    social_auth_keycloak_key_dict : "{'social_auth_keycloak_key': '{{ s3_access_key_id }}' }"
  no_log: true

# Task that fails if secret value does not exist

name: Store social_auth_keycloak_key
  set_fact:
    social_auth_keycloak_key: "_sso_configuration.resources[0].data['social_auth_keycloak_key'] | b64decode }}"
  no_log: true

- name: Add social_auth_keycloak_key to sso settings dict
  set_fact:
    social_auth_keycloak_key_dict : "{'social_auth_keycloak_key': '{{ s3_access_key_id }}' }"
  no_log: true



- name: Fail if required sso secret items are not present
  fail:
    msg: "Secret {{ object_storage_s3_secret  }} is missing required configuration data."
  when:
    - sso_secret_data_available
    # - not social_auth_keycloak_secret_available
    # - not social_auth_keycloak_public_key_available
    # - not keycloak_host_available
    # - not keycloak_protocol_available
    # - not keycloak_port_available
    # - not keycloak_realm_available

# Create a loop to merge all of the settings like shown below
- name: merge social_auth_keycloak_key with settings
  set_fact:
    sso_settings: "{{ sso_settings | combine(social_auth_keycloak_key) }}"
  no_log: true

# Check to make sure all of the following fields are set:
    # social_auth_keycloak_key: "{{ sso_automation_hub_client_id }}"
    # social_auth_keycloak_secret: "{{ sso_client_secret }}"
    # social_auth_keycloak_public_key: "{{ sso_realm_public_key }}"
    # keycloak_host: "{{ sso_host }}"
    # keycloak_protocol: "{{ sso_protocol }}"
    # keycloak_port: "{{ sso_port }}"
    # keycloak_realm: "{{ sso_automation_platform_realm }}"


# At the end of this playbook, we will have an sso_settings variable that is a dictionary of 
# SSO settings (7)
